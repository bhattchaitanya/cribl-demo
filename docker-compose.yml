version: '3.5'
services:
  gogen:
    build:
      context: gogen
  filebeat:
    build:
      context: filebeat
    volumes:
      - "${DOCKER_LIB_CONTAINERS:-/var/lib/docker/containers}:/var/lib/docker/containers"
      - "/var/run/docker.sock:/var/run/docker.sock"
  cribl:
    build:
      context: cribl
    ports:
      - "10200:10200"
      - "10088:10088"
      - "10080:10080"
      - "10001:10001"
      - "9999:9999"
      - "9000:9000"
      - "8125:8125"
      - "8125:8125/udp"
      - "5140:5140"
    volumes:
      - "./cribl/cribl:/opt/cribl/local/cribl"
    cap_add:
      - NET_ADMIN
  splunk:
    build:
      context: splunk
    ports:
      - "8000:8000"
      - "8088:8088"
      - "8089:8089"
      - "9997:9997"
    environment:
      - "DONT_TIMEOUT=1"
      - "CRIBL_ROUTING_DEMO=1"
    privileged: true
  minio:
    image: minio/minio:latest
    environment:
      - "MINIO_ACCESS_KEY=ACCESSKEY"
      - "MINIO_SECRET_KEY=SECRETKEY"
    ports:
      - "9001:9000"
    volumes:
      - "./data/minio:/data"
    command: server /data

  elasticsearch:
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"

  kibana:
    build:
      context: kibana
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - ./kibana/config/:/usr/share/kibana/config:ro
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

  # from: https://github.com/confluentinc/cp-docker-images/blob/5.0.1-post/examples/kafka-single-node/docker-compose.yml
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    # "`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-
    # An important note about accessing Kafka from clients on other machines: 
    # -----------------------------------------------------------------------
    #
    # The config used here exposes port 9092 for _external_ connections to the broker
    # i.e. those from _outside_ the docker network. This could be from the host machine
    # running docker, or maybe further afield if you've got a more complicated setup. 
    # If the latter is true, you will need to change the value 'localhost' in 
    # KAFKA_ADVERTISED_LISTENERS to one that is resolvable to the docker host from those 
    # remote clients
    #
    # For connections _internal_ to the docker network, such as from other services
    # and components, use kafka:29092.
    #
    # See https://rmoff.net/2018/08/02/kafka-listeners-explained/ for details
    # "`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-
    #
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS: "true"
  
  graphite:
    image: graphiteapp/graphite-statsd
    ports:
      - 8100:80
    volumes:
      - ./graphite/carbon.conf:/opt/graphite/conf/carbon.conf:ro
      - ./graphite/storage-schemas.conf:/opt/graphite/conf/storage-schemas.conf:ro

  grafana:
    image: grafana/grafana
    ports:
      - 8200:3000
    volumes:
      - ./grafana/data:/var/lib/grafana

  telegraf:
    image: telegraf:latest
    volumes:
      - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
      - "/var/run/docker.sock:/var/run/docker.sock"

  apiserver:
    build:
      context: apiserver
    volumes:
      - "./data:/opt/data"
    ports:
      - "3000:3000"
  redis:
    build:
      context: redis
    ports:
      - "6379:6379"
    volumes:
      - "./data:/data"
